/* tslint:disable */
/* eslint-disable */
/**
 * Todo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Def0
 */
export interface Def0 {
    /**
     * 
     * @type {string}
     * @memberof Def0
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Def0
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Def0
     */
    'name': string;
    /**
     * 
     * @type {Array<Def1>}
     * @memberof Def0
     */
    'items': Array<Def1>;
    /**
     * 
     * @type {string}
     * @memberof Def0
     */
    'status': Def0StatusEnum;
}

export const Def0StatusEnum = {
    Pending: 'PENDING',
    InProgress: 'IN-PROGRESS',
    Done: 'DONE'
} as const;

export type Def0StatusEnum = typeof Def0StatusEnum[keyof typeof Def0StatusEnum];

/**
 * 
 * @export
 * @interface Def1
 */
export interface Def1 {
    /**
     * 
     * @type {string}
     * @memberof Def1
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Def1
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Def1
     */
    'status': Def1StatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Def1
     */
    'user'?: string;
}

export const Def1StatusEnum = {
    Pending: 'PENDING',
    InProgress: 'IN-PROGRESS',
    Done: 'DONE'
} as const;

export type Def1StatusEnum = typeof Def1StatusEnum[keyof typeof Def1StatusEnum];


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rootGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rootGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rootGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ItemsApi - axios parameter creator
 * @export
 */
export const ItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cette route permet de supprimer un item d\'une TodoList.
         * @summary Supprimer un item d\'une TodoList
         * @param {string} id ID de la liste
         * @param {string} itemId ID de l\&#39;item à supprimer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdItemsItemIdDelete: async (id: string, itemId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listsIdItemsItemIdDelete', 'id', id)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('listsIdItemsItemIdDelete', 'itemId', itemId)
            const localVarPath = `/lists/{id}/items/{itemId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cette route permet de mettre à jour un item dans une TodoList.
         * @summary Mettre à jour un item dans une TodoList
         * @param {string} id ID de la liste
         * @param {string} itemId ID de l\&#39;item à mettre à jour
         * @param {Def1} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdItemsItemIdPut: async (id: string, itemId: string, body?: Def1, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listsIdItemsItemIdPut', 'id', id)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('listsIdItemsItemIdPut', 'itemId', itemId)
            const localVarPath = `/lists/{id}/items/{itemId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cette route permet d\'ajouter un nouvel item à une TodoList.
         * @summary Ajouter un item à une TodoList
         * @param {string} id ID de la liste
         * @param {Def1} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdItemsPost: async (id: string, body?: Def1, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listsIdItemsPost', 'id', id)
            const localVarPath = `/lists/{id}/items`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemsApi - functional programming interface
 * @export
 */
export const ItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * Cette route permet de supprimer un item d\'une TodoList.
         * @summary Supprimer un item d\'une TodoList
         * @param {string} id ID de la liste
         * @param {string} itemId ID de l\&#39;item à supprimer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsIdItemsItemIdDelete(id: string, itemId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsIdItemsItemIdDelete(id, itemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.listsIdItemsItemIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cette route permet de mettre à jour un item dans une TodoList.
         * @summary Mettre à jour un item dans une TodoList
         * @param {string} id ID de la liste
         * @param {string} itemId ID de l\&#39;item à mettre à jour
         * @param {Def1} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsIdItemsItemIdPut(id: string, itemId: string, body?: Def1, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Def1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsIdItemsItemIdPut(id, itemId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.listsIdItemsItemIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cette route permet d\'ajouter un nouvel item à une TodoList.
         * @summary Ajouter un item à une TodoList
         * @param {string} id ID de la liste
         * @param {Def1} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsIdItemsPost(id: string, body?: Def1, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Def1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsIdItemsPost(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.listsIdItemsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ItemsApi - factory interface
 * @export
 */
export const ItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ItemsApiFp(configuration)
    return {
        /**
         * Cette route permet de supprimer un item d\'une TodoList.
         * @summary Supprimer un item d\'une TodoList
         * @param {string} id ID de la liste
         * @param {string} itemId ID de l\&#39;item à supprimer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdItemsItemIdDelete(id: string, itemId: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.listsIdItemsItemIdDelete(id, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * Cette route permet de mettre à jour un item dans une TodoList.
         * @summary Mettre à jour un item dans une TodoList
         * @param {string} id ID de la liste
         * @param {string} itemId ID de l\&#39;item à mettre à jour
         * @param {Def1} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdItemsItemIdPut(id: string, itemId: string, body?: Def1, options?: RawAxiosRequestConfig): AxiosPromise<Def1> {
            return localVarFp.listsIdItemsItemIdPut(id, itemId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Cette route permet d\'ajouter un nouvel item à une TodoList.
         * @summary Ajouter un item à une TodoList
         * @param {string} id ID de la liste
         * @param {Def1} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdItemsPost(id: string, body?: Def1, options?: RawAxiosRequestConfig): AxiosPromise<Def1> {
            return localVarFp.listsIdItemsPost(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ItemsApi - object-oriented interface
 * @export
 * @class ItemsApi
 * @extends {BaseAPI}
 */
export class ItemsApi extends BaseAPI {
    /**
     * Cette route permet de supprimer un item d\'une TodoList.
     * @summary Supprimer un item d\'une TodoList
     * @param {string} id ID de la liste
     * @param {string} itemId ID de l\&#39;item à supprimer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public listsIdItemsItemIdDelete(id: string, itemId: string, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).listsIdItemsItemIdDelete(id, itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cette route permet de mettre à jour un item dans une TodoList.
     * @summary Mettre à jour un item dans une TodoList
     * @param {string} id ID de la liste
     * @param {string} itemId ID de l\&#39;item à mettre à jour
     * @param {Def1} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public listsIdItemsItemIdPut(id: string, itemId: string, body?: Def1, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).listsIdItemsItemIdPut(id, itemId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cette route permet d\'ajouter un nouvel item à une TodoList.
     * @summary Ajouter un item à une TodoList
     * @param {string} id ID de la liste
     * @param {Def1} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public listsIdItemsPost(id: string, body?: Def1, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).listsIdItemsPost(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListsApi - axios parameter creator
 * @export
 */
export const ListsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cette route retourne toutes les TodoLists.
         * @summary Lister toutes les TodoLists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lists/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cette route permet de supprimer une TodoList.
         * @summary Supprimer une TodoList
         * @param {string} id ID de la TodoList à supprimer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listsIdDelete', 'id', id)
            const localVarPath = `/lists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cette route permet de mettre à jour une TodoList.
         * @summary Mettre à jour une TodoList
         * @param {string} id ID de la TodoList à mettre à jour
         * @param {Def0} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdPut: async (id: string, body?: Def0, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listsIdPut', 'id', id)
            const localVarPath = `/lists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cette route permet d\'ajouter une nouvelle TodoList.
         * @summary Ajouter une nouvelle TodoList
         * @param {Def0} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsPost: async (body?: Def0, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lists/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListsApi - functional programming interface
 * @export
 */
export const ListsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListsApiAxiosParamCreator(configuration)
    return {
        /**
         * Cette route retourne toutes les TodoLists.
         * @summary Lister toutes les TodoLists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Def0>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.listsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cette route permet de supprimer une TodoList.
         * @summary Supprimer une TodoList
         * @param {string} id ID de la TodoList à supprimer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.listsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cette route permet de mettre à jour une TodoList.
         * @summary Mettre à jour une TodoList
         * @param {string} id ID de la TodoList à mettre à jour
         * @param {Def0} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsIdPut(id: string, body?: Def0, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Def0>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsIdPut(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.listsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cette route permet d\'ajouter une nouvelle TodoList.
         * @summary Ajouter une nouvelle TodoList
         * @param {Def0} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsPost(body?: Def0, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Def0>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsPost(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.listsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ListsApi - factory interface
 * @export
 */
export const ListsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListsApiFp(configuration)
    return {
        /**
         * Cette route retourne toutes les TodoLists.
         * @summary Lister toutes les TodoLists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Def0>> {
            return localVarFp.listsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Cette route permet de supprimer une TodoList.
         * @summary Supprimer une TodoList
         * @param {string} id ID de la TodoList à supprimer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.listsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Cette route permet de mettre à jour une TodoList.
         * @summary Mettre à jour une TodoList
         * @param {string} id ID de la TodoList à mettre à jour
         * @param {Def0} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdPut(id: string, body?: Def0, options?: RawAxiosRequestConfig): AxiosPromise<Def0> {
            return localVarFp.listsIdPut(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Cette route permet d\'ajouter une nouvelle TodoList.
         * @summary Ajouter une nouvelle TodoList
         * @param {Def0} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsPost(body?: Def0, options?: RawAxiosRequestConfig): AxiosPromise<Def0> {
            return localVarFp.listsPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListsApi - object-oriented interface
 * @export
 * @class ListsApi
 * @extends {BaseAPI}
 */
export class ListsApi extends BaseAPI {
    /**
     * Cette route retourne toutes les TodoLists.
     * @summary Lister toutes les TodoLists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsGet(options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).listsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cette route permet de supprimer une TodoList.
     * @summary Supprimer une TodoList
     * @param {string} id ID de la TodoList à supprimer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).listsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cette route permet de mettre à jour une TodoList.
     * @summary Mettre à jour une TodoList
     * @param {string} id ID de la TodoList à mettre à jour
     * @param {Def0} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsIdPut(id: string, body?: Def0, options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).listsIdPut(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cette route permet d\'ajouter une nouvelle TodoList.
     * @summary Ajouter une nouvelle TodoList
     * @param {Def0} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsPost(body?: Def0, options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).listsPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}



